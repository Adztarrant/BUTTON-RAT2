//Creates the likelihood for use in FRED and CoRe
//Before building:
//1. Change bin quantities unsigned int nneg=500 (line 25) and const unsigned int nbin=520 (line 28). nneg= negbin/0.4
//2. Paste values for double dx,dhisto[nbin] ={...} from timeRes.txt
//To build:
//1. First build binning object for create_like.cc: g++ -c binfile.cc
//2. Build create_like: g++ -o create_like -I. create_like.cc binfile.o
//To run:
// ./create_like "like.bin"
// NB To visualise the likelihood, build and run showlike

#include <stdio.h>
#include <math.h>
#include "binfile.h"
#include  <iostream>
#include  <fstream>
#include  <string>
#include <stdlib.h> 
#include <vector>
#include <sstream>
using namespace std; 


#define FOURLOG10 9.2103404
#define TBIN 0.4

int main(int argc,char **argv)
{
//	 //Original values from Michael 
//   float qmin=-1;
//   unsigned int nlike=1;
//   unsigned int nneg=200;
//   unsigned int bglike=1;
// 
//   unsigned int nbin=206;
//   double dx,dhisto[nbin];//={1.0001e-4,6.31e-4,3.981e-3,.02512,.1585,1,.3981,.1585,.0631,.02512,0.01};
  
  float qmin=-1;
  unsigned int nlike=1;
  unsigned int nneg=475;
  unsigned int bglike=1;
  int j = 0 ; 
  //const unsigned 
  int nbin=550;
  std::string val;
  vector <double> dhisto;
  std::ifstream myFile("timeRes.txt");
  double temp; 

  if(myFile.is_open())
    {
     //     while(myFile>>x)
     //{
      while(!myFile.eof()){
	while(getline(myFile, val, ',')){  /// comma seprated 
	  temp = atof(val.c_str());
	  dhisto.push_back(temp); //atof(val.c_str());  //// converts string to char to double and adds to array
  	 //j++;
	 // cout << dhisto[j]<< " " << temp << endl;
	}}
    }
  myFile.close();

  nbin = dhisto.size();
  //  for(int i =0; i<=nbin; i++){
  //cout << dhisto[i] << endl;
  //}

 //double dix,dhisto[nbin] ={.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.00010519, 0.000146703, 0.000181515, 0.000200968, 0.000215226, 0.000244946, 0.000299756, 0.000364216, 0.000409542, 0.000423954, 0.000428176, 0.000460592, 0.000544228, 0.000656036, 0.000742744, 0.000785814, 0.000833156, 0.000952007, 0.00117027, 0.0014837, 0.00189064, 0.00242128, 0.00318519, 0.00435238, 0.00602481, 0.00815046, 0.0105752, 0.0131442, 0.0157243, 0.0181238, 0.020017, 0.0210957, 0.0212575, 0.0205212, 0.0189464, 0.0167067, 0.0141731, 0.0117692, 0.00967984, 0.00786479, 0.00630606, 0.00509609, 0.00429901, 0.00383842, 0.00356917, 0.00340552, 0.00333533, 0.00336129, 0.00347663, 0.00367344, 0.00395442, 0.00429606, 0.00463211, 0.00492458, 0.00518881, 0.00544345, 0.00568447, 0.00589844, 0.00608718, 0.00627256, 0.0064672, 0.00665623, 0.0068195, 0.00696409, 0.00713327, 0.00737682, 0.00770299, 0.00806234, 0.00840164, 0.00871688, 0.00902824, 0.00932198, 0.00952588, 0.00960175, 0.00959923, 0.00955669, 0.00949912, 0.0094744, 0.00950612, 0.0095843, 0.00968093, 0.00976153, 0.00980497, 0.0098101, 0.00977977, 0.00972918, 0.00969409, 0.00968745, 0.00970238, 0.00971061, 0.00959731, 0.00925083, 0.00874368, 0.00828504, 0.00800791, 0.00786494, 0.00773148, 0.0075613, 0.00738422, 0.00722128, 0.00705625, 0.00686166, 0.0066442, 0.00644516, 0.00628641, 0.0061352, 0.00593068, 0.0056428, 0.00530342, 0.00496722, 0.0046557, 0.00436731, 0.00411463, 0.0039221, 0.00378773, 0.0036695, 0.00353255, 0.00338127, 0.00323288, 0.00307581, 0.00286841, 0.00259355, 0.00229783, 0.00205862, 0.00191166, 0.00181642, 0.00170315, 0.00154915, 0.00139184, 0.00127579, 0.00120881, 0.00116994, 0.00113513, 0.00108604, 0.00101059, 0.000907952, 0.000796136, 0.000700696, 0.000632584, 0.00058918, 0.000567444, 0.00056203, 0.000563342, 0.000565365, 0.000566629, 0.00056736, 0.000567582, 0.000568282, 0.00056976, 0.000565317, 0.000546677, 0.000517488, 0.000495359, 0.000496536, 0.00053946, 0.000628337, 0.00072145, 0.00077933, 0.000808406, 0.000836147, 0.000880388, 0.00094277, 0.00102375, 0.00113399, 0.00128219, 0.00144859, 0.00158711, 0.00167087, 0.00172791, 0.00182351, 0.00200271, 0.00224488, 0.00248223, 0.00266918, 0.00281848, 0.00296701, 0.00313102, 0.00330555, 0.00348887, 0.00369941, 0.00396577, 0.00429597, 0.00466929, 0.00505819, 0.00544582, 0.0058314, 0.00625668, 0.00680134, 0.00750753, 0.00834611, 0.00928853, 0.0104589, 0.0121533, 0.0146809, 0.0184092, 0.0239638, 0.0324506, 0.0460049, 0.0682276, 0.103888, 0.158556, 0.237378, 0.342495, 0.471533, 0.61711, 0.76553, 0.895468, 0.980414, 1, 0.947695, 0.830419, 0.669932, 0.495717, 0.334045, 0.203489, 0.112058, 0.0562576, 0.0255888, 0.0102394, 0.00364797, 0.0012568, 0.000393744, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,};


  unsigned int histo[nbin];
  binfile      bf(argv[1],'w');
  void         *starts[2];
  int          sizes[3];
  int          numbers[3];
  unsigned int array[3];
  int i;

//	 // Original function from Michael
//   for(i=-((int) nneg); i<((int) nbin)-((int) nneg); i++)
//     {
//       dx=(i*TBIN/0.401);
//       if (dx*dx>20)
// 	dhisto[i+nneg]=1.0001e-4;
//       else
// 	dhisto[i+nneg]=0.99*exp(-0.5*dx*dx)+1.0001e-4;
//       dx=i*TBIN-0.414;
//       if (dx<-0.4)
// 	dhisto[i+nneg]+=(exp(8.88+1.803*dx)+exp(4.379+0.04789*dx))/1.374e4;
//     }
  sizes[0]=4;
  sizes[1]=4;
  sizes[2]=-1;
  numbers[0]=3;
  numbers[1]=nbin;
  numbers[2]=-1;
  starts[0]=array;
  starts[1]=histo;

  array[0]=nlike;
  array[1]=nneg;
  ((float *)starts[0])[2]=qmin;

  for(i=0; i<numbers[1]; i++)
      histo[i]=(unsigned int) (1e5*(1+0.25*log(dhisto[i])/log(10))+0.5);
  //for(i=0; i<numbers[1]; i++)
  //  printf("%u\n",histo[i]);
  bf.write(sizes,numbers,starts);
}
